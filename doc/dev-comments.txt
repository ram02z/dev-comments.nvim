==============================================================================
------------------------------------------------------------------------------
Table of contents:
  Abstract......................................................|dev-comments|
  The setup function....................................|dev_comments.setup()|
  Configure the setup.............................|dev-comments-configuration|
  Default mappings.............................|dev-comments-default-mappings|
  Default commands.............................|dev-comments-default-commands|
  Telecope integration................................|dev-comments-telescope|


------------------------------------------------------------------------------
                                                                  *dev-comments*
# Abstract~

*dev-comments.nvim* is a plugin that uses the tree-sitter-comment parser to
list and search for dev comments

Author: Omar Zeghouani
License: MIT


------------------------------------------------------------------------------
                                                          *dev_comments.setup()*
                         `dev_comments.setup`({config})
Module setup

Parameters~
{config} `(table|nil)` configuration options. See |dev-comments-configuration|

Usage~
`require("dev_comments").setup({})` (replace `{}` with your `config` table)

------------------------------------------------------------------------------
                                                    *dev-comments-configuration*
# Configuration~

Default values:
>
  {
    -- Enables vim.notify messages
    debug = false,
    -- Creates <Plug> mappings
    default_mappings = true,
    -- Create user commands
    default_commands = true,
    -- Each call of dev-comments is cached
    -- Play around with the reset autocommands for more aggressive caching
    cache = {
      enabled = true,
      reset_autocommands = { "BufWritePost", "BufWinEnter" },
    },
    -- Loads and sets default options for telescope plugin
    telescope = {
      load = true,
      -- require("dev_comments.constants").Files
      [Files.CURRENT] = {
        tags = {},
        users = {},
      },
      [Files.OPEN] = {
        tags = {},
        users = {},
      },
      [Files.ALL] = {
        hidden = false,
        tags = {},
        users = {},
      },
    },
    -- Cycle through dev-comments in a given buffer
    -- Caching is recommended for this feature
    cycle = {
      wrap = true,
    },
    -- Improves performance when searching in a large directory
    -- Requires ripgrep or grep
    pre_filter = {
      -- require("dev_comments.constants").FilterCommand
      command = FilterCommand.RIPGREP,
      -- If search fails, uses vim.loop.scan_dir (very slow)
      fallback_to_scan_dir = true,
    },
    -- Highlight for the tag in picker (not in buffer)
    highlight = {
      tags = {
        ["TODO"] = "TSWarning",
        ["HACK"] = "TSWarning",
        ["WARNING"] = "TSWarning",
        ["FIXME"] = "TSDanger",
        ["XXX"] = "TSDanger",
        ["BUG"] = "TSDanger",
      },
      -- Used if lookup fails for a given tag
      fallback = "TSNote",
    },
  }
<


==============================================================================
------------------------------------------------------------------------------
                                                 *dev-comments-default-mappings*

# Default mappings~

dev-comments.nvim comes with optional default mappings and commands

>
  function()
    -- <Plug> keymaps
    vim.keymap.set("n", "<Plug>DevCommentsTelescopeCurrent", function()
      require("telecope").extensions.dev_comments.current({})
    end, { silent = true })
    vim.keymap.set("n", "<Plug>DevCommentsTelescopeOpen", function()
      require("telecope").extensions.dev_comments.open({})
    end, { silent = true })
    vim.keymap.set("n", "<Plug>DevCommentsTelescopeAll", function()
      require("telecope").extensions.dev_comments.open({})
    end, { silent = true })
    vim.keymap.set("n", "<Plug>DevCommentsCyclePrev", function()
      require("dev_comments.cycle").goto_prev()
    end, { silent = true })
    vim.keymap.set("n", "<Plug>DevCommentsCycleNext", function()
      require("dev_comments.cycle").goto_next()
    end, { silent = true })

    -- Keybinds
    vim.keymap.set("n", "[c", "<Plug>DevCommentsCyclePrev")
    vim.keymap.set("n", "]c", "<Plug>DevCommentsCycleNext")
  end
<

------------------------------------------------------------------------------
                                                 *dev-comments-default-commands*

# Default commands~

>
  function()
    local Files = require("dev_comments.constants").Files
    local cache = require("dev_comments.cache")
    vim.api.nvim_create_user_command("DevCommentsCacheReset", function()
      cache.reset(Files.CURRENT)
      cache.reset(Files.OPEN)
      cache.reset(Files.ALL)
    end, {})
    vim.api.nvim_create_user_command("DevCommentsCacheToggle", function()
      local registered = cache.unregister()
      if not registered then cache.register() end
    end, {})
    vim.api.nvim_create_user_command("DevCommentsCacheDisable", function()
      cache.unregister()
    end, {})
    vim.api.nvim_create_user_command("DevCommentsCacheEnable", function()
      cache.register()
    end, {})
    vim.api.nvim_create_user_command("DevCommentsCyclePrev", function()
      require("dev_comments.cycle").goto_prev()
    end, {})
    vim.api.nvim_create_user_command("DevCommentsCycleNext", function()
      require("dev_comments.cycle").goto_next()
    end, {})
  end
<


==============================================================================
------------------------------------------------------------------------------
                                                                *bufload_file()*
                             `bufload_file`({path})
Parameters~
{path} `(string)` File path
Return~
`(number)` bufnr Buffer number

------------------------------------------------------------------------------
                                                                    *get_type()*
                               `get_type`({path})
Parameters~
{path} `(string)` File path
Return~
`(string)` # directory or file

------------------------------------------------------------------------------
                                                          *get_path_separator()*
                             `get_path_separator`()
Return~
`(string)`

------------------------------------------------------------------------------
                                                                    *U.notify()*
                               `U.notify`({...})
Parameters~
{...} `(any)` # vim.notify() args

------------------------------------------------------------------------------
                                                      *U.get_highlight_by_tag()*
                  `U.get_highlight_by_tag`({tag}, {fallback})
Parameters~
{tag} `(string)` Comment tag
{fallback} `(string)` Fallback highlight name
Return~
`(string)` hl_name Highlight name

------------------------------------------------------------------------------
                                                             *U.get_node_text()*
                       `U.get_node_text`({node}, {bufnr})
Parameters~
{node} `(any)` # tsnode
{bufnr} `(number)` Buffer number
Return~
`(string)` node_text Returns empty string if node is nil

------------------------------------------------------------------------------
Class~
{Range}
Fields~
{start_row} `(number)` The start row of text
{end_row} `(number)` The end row of text
{start_col} `(number)` The start column of text
{end_col} `(number)` The end column of text

------------------------------------------------------------------------------
                                                         *U.get_text_by_range()*
                    `U.get_text_by_range`({range}, {bufnr})
Parameters~
{range} Range The range of the text
{bufnr} `(number)` The buffer number to get text from
Return~
`(string)` text

------------------------------------------------------------------------------
                                                       *U.load_buffers_by_cwd()*
                    `U.load_buffers_by_cwd`({cwd}, {hidden})
Parameters~
{cwd} `(optional)` `(string)` Directory to search in
{hidden} `(optional)` `(boolean)` Include hidden files (false default)
Return~
`(table)` bufnrs Buffer numbers

------------------------------------------------------------------------------
                                                     *U.load_buffers_by_fname()*
                    `U.load_buffers_by_fname`({file_names})
Parameters~
{file_names} `(table)` File names
Return~
`(table)` bufnrs Buffer numbers

------------------------------------------------------------------------------
                                                            *U.filter_buffers()*
                  `U.filter_buffers`({buffer_handles}, {cwd})
Parameters~
{buffer_handles} `(table)` Buffer numbers
{cwd} `(string)` Directory to filter
Return~
`(table)` bufnrs Buffer numbers

------------------------------------------------------------------------------
                                                                     *U.split()*
                                `U.split`({...})

Parameters~
{...} `(any)`
Return~
`(table)` List of split components
Return~
`(nil)` nil vim.split call failed


==============================================================================
------------------------------------------------------------------------------
                                                        *dev-comments-telescope*

# Telescope~

dev-comments.nvim comes with first class telescope integration



 vim:tw=78:ts=8:noet:ft=help:norl: